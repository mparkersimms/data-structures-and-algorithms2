/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stacksandqueues;

import org.junit.Test;

import static org.junit.Assert.*;

public class AppTest {
    @Test public void stackTest() {
        Stack testStack = new Stack();
        assertNull(testStack.top);
        assertTrue(testStack.isEmpty());
        testStack.push("first");
        assertNotNull(testStack.top);
        testStack.push("second");
        testStack.push("third");
        String actual = testStack.toString();
        System.out.println(testStack);
        String expected = "{third}->{second}->{first}->";
        assertEquals(expected, actual);
        Object actual2 = testStack.pop();
        Object expected2 = "third";
        assertEquals(expected2, actual2);
        testStack.pop();
        testStack.pop();
        assertTrue(testStack.isEmpty());
    }
    @Test public void queueTest(){
        Queue testQueue = new Queue();
        assertNull(testQueue.front);
        testQueue.enQueue("first");
        assertNotNull(testQueue.front);
        testQueue.enQueue("second");
        testQueue.enQueue("third");
        testQueue.enQueue("fourth");
        System.out.println(testQueue);
        String expected = "{first}->{second}->{third}->{fourth}->";
        String actual = testQueue.toString();
        assertEquals(expected, actual);
        Object expected2 = "first";
        Object actual2 = testQueue.deQueue();
        assertEquals(expected2, actual2);
        Object expected3 = "second";
        Object actual3 = testQueue.peek();
        assertEquals(expected3, actual3);
        testQueue.deQueue();
        testQueue.deQueue();
        testQueue.deQueue();
        assertNull(testQueue.front);
        System.out.println(testQueue);

    }
    @Test public void psuedoQueueTest(){

        PsuedoQueue newQ = new PsuedoQueue();
        System.out.println(newQ);
        newQ.enQueue("first value");
        assertNotNull(newQ.stackOne);
        assertNull(newQ.stackTwo.top);
        assertNull(newQ.stackOne.top.next);
        newQ.enQueue("second value");
        Object expected = "first value";
        assertEquals(expected, newQ.stackOne.top.next.value);

        PsuedoQueue newQ2 = new PsuedoQueue();
        newQ2.stackTwo.push("first new value");
        newQ2.enQueue("second new value");
        assertNotNull(newQ2.stackOne);
        assertNull(newQ2.stackTwo.top);
        assertNotNull(newQ.stackOne.top.next);
        Object expected2 = "first new value";
        assertEquals(expected2, newQ2.stackOne.top.next.value);

        newQ.deQueue();
        Object expected3 = "second value";
        assertEquals(expected3, newQ.stackTwo.top.value);
        assertNull(newQ.stackOne.top);

    }
}
